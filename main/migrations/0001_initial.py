# Generated by Django 5.1.5 on 2025-05-03 16:37

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("userID", models.AutoField(primary_key=True, serialize=False)),
                ("firstName", models.CharField(max_length=100)),
                ("lastName", models.CharField(max_length=100)),
                ("email", models.EmailField(max_length=100, unique=True)),
                ("username", models.CharField(max_length=25, unique=True)),
                (
                    "password",
                    models.CharField(
                        max_length=100,
                        validators=[django.core.validators.MinLengthValidator(8)],
                    ),
                ),
                ("feedback", models.CharField(max_length=200)),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                ("date_joined", models.DateTimeField(auto_now_add=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Classroom",
            fields=[
                ("classroomID", models.AutoField(primary_key=True, serialize=False)),
                ("className", models.CharField(max_length=100)),
                ("startDate", models.DateField()),
                ("endDate", models.DateField()),
                ("active", models.BooleanField(default=True)),
                ("open", models.BooleanField(default=True)),
                ("instructorName", models.CharField(default="", max_length=200)),
                (
                    "classroomCode",
                    models.CharField(blank=True, max_length=5, unique=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Exercise",
            fields=[
                ("exerciseID", models.AutoField(primary_key=True, serialize=False)),
                ("exerciseName", models.CharField(max_length=200)),
                ("exerciseDescription", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="Instructor",
            fields=[
                (
                    "user_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("department", models.CharField(max_length=200)),
                ("employed", models.BooleanField(default=True)),
            ],
            options={
                "abstract": False,
            },
            bases=("main.user",),
        ),
        migrations.CreateModel(
            name="Student",
            fields=[
                (
                    "user_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("numExercisesCompleted", models.IntegerField(default=0)),
                ("numHoursSpent", models.IntegerField(default=0)),
                ("daysStreak", models.IntegerField(default=0)),
                ("streakToday", models.BooleanField(default=False)),
                ("enrolled", models.BooleanField(default=True)),
            ],
            options={
                "abstract": False,
            },
            bases=("main.user",),
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                ("questionID", models.AutoField(primary_key=True, serialize=False)),
                (
                    "questionType",
                    models.CharField(
                        choices=[
                            ("fill_blank", "Fill in the Blank"),
                            ("click_drag", "Click and Drag"),
                            ("matching", "Matching"),
                            ("ordering", "Ordering"),
                            ("translating", "Translating"),
                            ("multiple_choice", "Multiple Choice"),
                            ("true_false", "True/False"),
                        ],
                        default="multiple_choice",
                        max_length=100,
                    ),
                ),
                ("questionPrompt", models.TextField()),
                ("correctAnswer", models.TextField()),
                ("is_saved", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "exercises",
                    models.ManyToManyField(
                        related_name="questions", to="main.exercise"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="main.instructor",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Answer",
            fields=[
                ("answerID", models.AutoField(primary_key=True, serialize=False)),
                ("answer", models.TextField()),
                ("correct", models.BooleanField(default=False)),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answers",
                        to="main.question",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Topic",
            fields=[
                ("topicID", models.AutoField(primary_key=True, serialize=False)),
                ("topicName", models.TextField()),
                ("topicDescription", models.TextField()),
                ("topicNote", models.TextField()),
                (
                    "classrooms",
                    models.ManyToManyField(related_name="topics", to="main.classroom"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="topics",
                        to="main.instructor",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="exercise",
            name="topics",
            field=models.ManyToManyField(related_name="exercises", to="main.topic"),
        ),
        migrations.AddField(
            model_name="exercise",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="exercises",
                to="main.instructor",
            ),
        ),
        migrations.AddField(
            model_name="classroom",
            name="instructors",
            field=models.ManyToManyField(
                related_name="classrooms", to="main.instructor"
            ),
        ),
        migrations.AddField(
            model_name="classroom",
            name="students",
            field=models.ManyToManyField(
                blank=True, related_name="classrooms", to="main.student"
            ),
        ),
        migrations.CreateModel(
            name="InvitedStudent",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("email", models.EmailField(max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "classroom",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invited_students",
                        to="main.classroom",
                    ),
                ),
            ],
            options={
                "unique_together": {("classroom", "email")},
            },
        ),
    ]
